name: Debug Build and Release Chrome Extension

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      EXTENSION_DIR: Send-to-AI  # Thư mục chứa mã nguồn extension
      NODE_VERSION: '16'         # Phiên bản Node.js để sử dụng

    steps:
      # Bước kiểm tra và tải mã nguồn từ repo
      - name: Check out repository
        uses: actions/checkout@v3

      # Thiết lập Node.js với phiên bản đã khai báo ở biến env
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Kiểm tra cấu trúc thư mục tại thư mục gốc
      - name: List files in root directory
        run: ls -alh

      # Kiểm tra cấu trúc thư mục trong Send-to-AI (nếu có)
      - name: List files in Send-to-AI directory
        if: ${{ env.EXTENSION_DIR }}
        run: ls -alh ${{ env.EXTENSION_DIR }}

      # Kiểm tra sự tồn tại của package.json ở thư mục gốc
      - name: Check for package.json in root
        run: |
          if [ -f package.json ]; then
            echo "Found package.json in root directory"
          else
            echo "Error: package.json not found in root directory"
          fi

      # Kiểm tra sự tồn tại của package.json trong thư mục Send-to-AI
      - name: Check for package.json in Send-to-AI directory
        run: |
          if [ -f ${{ env.EXTENSION_DIR }}/package.json ]; then
            echo "Found package.json in ${{ env.EXTENSION_DIR }} directory"
          else
            echo "Error: package.json not found in ${{ env.EXTENSION_DIR }} directory"
          fi

      # Cài đặt dependencies trong thư mục gốc nếu package.json tồn tại ở đó
      - name: Install dependencies from root if package.json exists
      if: ${{ !env.EXTENSION_DIR || (env.EXTENSION_DIR && ! steps.check_for_package_json_in_send_to_ai.outputs.package_json_found) }}
      run: |
        npm install
        if [ $? -ne 0 ]; then
          echo "Error: npm install failed in root directory"
        fi

      # Cài đặt dependencies trong thư mục Send-to-AI nếu package.json tồn tại ở đó
      - name: Install dependencies from Send-to-AI if package.json exists
        if: ${{ env.EXTENSION_DIR && steps.check_for_package_json_in_send_to_ai.outputs.package_json_found }}
        run: npm install
        working-directory: ${{ env.EXTENSION_DIR }}

      # Đóng gói extension thành file .zip
      - name: Generate .zip file
        run: |
          zip -r extension.zip ${{ env.EXTENSION_DIR }} -x ".git/*" -x "node_modules/*" || echo "Error: zip creation failed"
        working-directory: ./${{ env.EXTENSION_DIR }}

      # Tạo file .crx
      - name: Generate .crx file
        run: |
          openssl genrsa -out key.pem 2048
          openssl req -new -key key.pem -out csr.pem -subj "/CN=Chrome Extension"
          openssl x509 -req -days 365 -in csr.pem -signkey key.pem -out cert.pem
          cat cert.pem key.pem > extension.crx || echo "Error: .crx creation failed"
        working-directory: ./${{ env.EXTENSION_DIR }}

      # Tạo bản phát hành mới trên GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload file .zip lên bản phát hành
      - name: Upload .zip file to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./extension.zip
          asset_name: extension.zip
          asset_content_type: application/zip

      # Upload file .crx lên bản phát hành
      - name: Upload .crx file to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./extension.crx
          asset_name: extension.crx
          asset_content_type: application/octet-stream

      # Cleanup các file nhạy cảm sau khi hoàn thành
      - name: Cleanup
        run: rm -f extension.zip extension.crx key.pem cert.pem
